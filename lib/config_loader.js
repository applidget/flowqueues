// Generated by CoffeeScript 1.7.1

/*
Flowqueues - Queue based programming for node.js
(c) Copyright 2014 Applidget SAS
Released under the MIT License
 */

(function() {
  var ConfigLoader, JobDescription, TaskDescription, fs, yaml;

  TaskDescription = require("./task_description").TaskDescription;

  JobDescription = require("./job_description").JobDescription;

  yaml = require('js-yaml');

  fs = require('fs');

  ConfigLoader = (function() {
    function ConfigLoader(config) {
      this.config = config;
    }

    ConfigLoader.prototype.load = function(file) {
      var conf, workflow, _i, _len, _ref, _results;
      conf = yaml.safeLoad(fs.readFileSync(file, 'utf8')).flowqueues_config;
      if (conf.jobs_dir) {
        this.config.overridenJobDir = conf.jobs_dir;
      }
      _ref = conf.workflows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        workflow = _ref[_i];
        _results.push((function(_this) {
          return function(workflow) {
            var jobDesc, task, _j, _len1, _ref1, _results1;
            jobDesc = new JobDescription(workflow.name);
            _this.config.addJobDescription(jobDesc);
            jobDesc.setFirstTaskName(workflow.first_task);
            _ref1 = workflow.tasks;
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              task = _ref1[_j];
              _results1.push((function(task) {
                var concurrency, name, next, taskDesc;
                concurrency = task.concurrency || 1;
                name = task.name;
                next = task.next || {};
                taskDesc = new TaskDescription(name, next, concurrency);
                return jobDesc.addTaskDescription(taskDesc);
              })(task));
            }
            return _results1;
          };
        })(this)(workflow));
      }
      return _results;
    };

    return ConfigLoader;

  })();

  exports.ConfigLoader = ConfigLoader;

}).call(this);
